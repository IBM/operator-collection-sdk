#
# Copyright 2023 IBM Inc. All rights reserved
# SPDX-License-Identifier: Apache2.0
#

---
- name: Verify
  hosts: all
  connection: local
  gather_facts: false
  tasks:
    - name: Set base directory
      ansible.builtin.set_fact:
        base_dir: "{{ lookup('env', 'PWD') }}/{{ collection_namespace  | lower | replace('-','_') }}/{{ collection_name  | lower | replace('-','_') }}"

    - name: Find collections directory
      ansible.builtin.find:
        paths: "{{ base_dir }}/collections"
      register: collections_path

    - name: Assert that collections directory is not empty
      ansible.builtin.assert:
        that: 
          - collections_path.files | length == 3

    - name: Find 'kubernetes-core-2.4.0.tar.gz' file
      ansible.builtin.find:
        paths: "{{ base_dir }}/collections"
        patterns: kubernetes-core-2.4.0.tar.gz
      register: kubernetes_core_file

    - name: Assert that 'kubernetes-core-2.4.0.tar.gz' file exists
      ansible.builtin.assert:
        that: 
          - kubernetes_core_file.files | length == 1

    - name: Find 'operator_sdk-util-0.5.0.tar.gz' file
      ansible.builtin.find:
        paths: "{{ base_dir }}/collections"
        patterns: operator_sdk-util-0.5.0.tar.gz
      register: operator_sdk_util_file

    - name: Assert that 'operator_sdk-util-0.5.0.tar.gz' file exists
      ansible.builtin.assert:
        that: 
          - operator_sdk_util_file.files | length == 1

    - name: Find requirements.yml file
      ansible.builtin.find:
        paths: "{{ base_dir }}/collections"
        patterns: requirements.yml
      register: requirements_yml_file

    - name: Read requirements.yml
      ansible.builtin.set_fact:
        requirementsyml: "{{ lookup('template', '{{ requirements_yml_file.files[0].path }}') | from_yaml }}"

    - name: Read collections name
      ansible.builtin.set_fact:
        all_collection_values: "{{ requirementsyml.collections | json_query('[].*') | flatten}}"
        collection_kube: "kubernetes-core-2.4.0.tar.gz"
        collection_sdk: "operator_sdk-util-0.5.0.tar.gz"

    - name: Assert that requirements.yml contains correct ansible requirements
      ansible.builtin.assert:
        that: 
          - collection_kube in all_collection_values
          - collection_sdk in all_collection_values

    - name: Find playbooks directory
      ansible.builtin.find:
        paths: "{{ base_dir }}/playbooks"
      register: playbooks_path

    - name: Assert that playbooks directory contains playbook.yml
      ansible.builtin.assert:
        that: 
          - "'playbook.yml' in item.path"
      with_items: "{{ playbooks_path.files }}"
      when:  "'playbook.yml' in item.path"

    - name: Read playbook
      ansible.builtin.set_fact:
        playbookyml: "{{ lookup('template', '{{ item.path }}') | from_yaml }}"
      with_items: "{{ playbooks_path.files }}"
      when:  "'playbook.yml' in item.path"

    - name: Assert that requirements.yml contains correct ansible requirements
      ansible.builtin.assert:
        that: 
          - "'all' in playbookyml[0].hosts"
          - "'vars/my_vars.yml' in playbookyml[0].vars_files[0]"

    - name: Find roles directory
      ansible.builtin.find:
        paths: "{{ base_dir }}/playbooks/roles"
      register: roles_path

    - name: Assert that the roles directory exists
      ansible.builtin.assert:
        that: 
          - roles_path.warnings is not defined

    - name: Find galaxy.yml file
      ansible.builtin.find:
        paths: "{{ base_dir }}"
        patterns: galaxy.yml
      register: galaxyyml

    - name: Assert that the galaxy.yml file exists
      ansible.builtin.assert:
        that: 
          - galaxyyml.matched == 1

    - name: Read galaxy.yml
      ansible.builtin.set_fact:
        galaxydata: "{{ lookup('template', '{{ galaxyyml.files[0].path }}') | from_yaml }}"

    - name: Find operator-config.yml file
      ansible.builtin.find:
        paths: "{{ base_dir }}"
        patterns: operator-config.yml
      register: operatorconfig

    - name: Assert that the operator-config.yml file exists
      ansible.builtin.assert:
        that: 
          - operatorconfig.matched == 1

    - name: Read operator-config
      ansible.builtin.set_fact:
        operatorconfigdata: "{{ lookup('template', '{{ operatorconfig.files[0].path }}') | from_yaml }}"

    - name: Assert that operator-config.yml contains correct values
      ansible.builtin.assert:
        that: 
          - operatorconfigdata.description == galaxydata.description
          - operatorconfigdata.version == galaxydata.version
          - operatorconfigdata.displayName is defined
          - operatorconfigdata.domain == "{{ collection_namespace  | lower | replace('_','-') }}"
          - operatorconfigdata.name == "{{ collection_name  | lower | replace('_','-') }}"
          - operatorconfigdata.resources[0].description is defined
          - operatorconfigdata.resources[0].displayName is defined
          - operatorconfigdata.resources[0].kind is defined
          - operatorconfigdata.resources[0].playbook == 'playbooks/playbook.yml'
          - operatorconfigdata.resources[0].vars[0].description is defined
          - operatorconfigdata.resources[0].vars[0].displayName is defined
          - operatorconfigdata.resources[0].vars[0].name is defined
          - operatorconfigdata.resources[0].vars[0].type is defined

    - name: Find ./.vscode/extensions.json file"
      ansible.builtin.stat:
        path: "{{ base_dir }}/.vscode/extensions.json"
      register: extensions_json

    - name: Validate ./.vscode/extensions.json file exists
      ansible.builtin.assert:
        that: extensions_json.stat.exists

    - name: Read extensions.json file
      ansible.builtin.set_fact:
        extensionsjson: "{{ lookup('template', '{{ base_dir }}/.vscode/extensions.json') | from_json }}"

    - name: Assert that requirements.yml contains correct ansible requirements
      ansible.builtin.assert:
        that: 
          - "'recommendations' in extensionsjson"
          - "'ibm.operator-collection-sdk' in extensionsjson.recommendations"
          - "'redhat.ansible' in extensionsjson.recommendations"
